动态规划和贪心算法都是一种递推算法
均是用局部最优解来推导全局最优解

是对遍历解空间的一种优化  （dfs是要对所有进行搜索  这里只是每次用最优的然后不断递推到最后得到最优解）

当问题具有最优子结构时，可用动规，而贪心是动规的特例

一般来说dfs都是搜有多少个解  而动规是求出一个最优解

贪心策略：
遵循某种规则，不断（贪心地）选取当前最优策略(只看眼前)，最终找到最优解
难点：当前最优未必是整体最优 


采用动态规划求解的问题需要具有两个特性：

最优子结构（Optimal Substructure）：问题的一个最优解中所包含的子问题的解也是最优的。

重叠子问题（Overlapping Subproblems）：用递归算法对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。

问题具有最优子结构性质，我们才能写出最优解的递归方程；具有重叠子问题特性，我们才能通过避免重复计算来减少运行时间。

综上所述，动态规划的关键是 ―― 记忆，空间换时间，不重复求解，从较小问题解逐步决策，构造较大问题的解。


动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于解决冗余（重复计算），这
是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，
所以它的空间复杂度要大于其它的算法。

从上面的例子中，我们可以总结动态规划解决最优化问题的一般步骤：

    1.分析最优解的性质，并刻划其结构特征。

    2.递归地定义最优值。

    3.以自底向上的方式或自顶向下的记忆化方法计算出最优值。

    4.根据计算最优值时得到的信息，构造一个最优解。

步骤(1)―(3)是动态规划算法的基本步骤。在只需要求出最优值的情形，步骤(4)可以省略，
若需要求出问题的一个最优解，则必须执行步骤(4)。此时，在步骤(3)中计算最优值时，通常需记录更多的信息，
以便在步骤(4)中，根据所记录的信息，快速地构造出一个最优解。

